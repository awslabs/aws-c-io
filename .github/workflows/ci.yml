name: CI

on:
  push:
    branches:
      - '*'
      - '!main'

env:
  BUILDER_VERSION: v0.8.26
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-c-io
  LINUX_BASE_IMAGE: ubuntu-16-x64
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  linux-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - manylinux1-x64
          - manylinux1-x86
          - manylinux2014-x64
          - manylinux2014-x86
          - fedora-34-x64
          - opensuse-leap
          - rhel8-x64
          - al2-x64
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ matrix.image }} downstream

  linux-byo-crypto:
    runs-on: ubuntu-latest
    steps:
       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-al2-x64 --cmake-extra=-DBYO_CRYPTO=ON

  clang-compat:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3, 6, 8, 9, 10, 11]
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ env.LINUX_BASE_IMAGE }} --compiler=clang-${{ matrix.version }}

  clang-tsan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [11]
    steps:
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ env.LINUX_BASE_IMAGE }} --compiler=clang-${{ matrix.version }} --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=",thread"

  clang-asan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [11]
    steps:
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ env.LINUX_BASE_IMAGE }} --compiler=clang-${{ matrix.version }} --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=",address,undefined"

  gcc-compat:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [4.8, 5, 6, 7, 8]
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ env.LINUX_BASE_IMAGE }} --compiler=gcc-${{ matrix.version }}

  linux-shared-libs:
    runs-on: ubuntu-latest
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.PACKAGE_NAME }} ${{ env.BUILDER_VERSION }} ${{ secrets.AWS_ECR_REPO }} aws-crt-${{ env.LINUX_BASE_IMAGE }} --cmake-extra=-DBUILD_SHARED_LIBS=ON

  windows:
    runs-on: windows-latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }}

  windows-vc14:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14

  windows-shared-libs:
    runs-on: windows-latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON

  osx:
    runs-on: macos-latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} downstream


