
#root-ca.crt <-- this thing can issue intermediates as well
# server.crt <-- signed by root_ca.crt
#client.crt <-- signed by root_ca.crt
#intermediate.crt <-- signed by root_ca.crt
end-user.crt <-- signed by intermediate.crt
end-user-chain.crt <-- concats end-user.crt and intermediate.crt


FILES INCLUDED
ca_root_cnf          <-- Configuration File for ca_root related commands
ca_intermediate_cnf  <-- Configuration File for ca_intermediate related commands

GENERATED FILES
ca_root.crt          <-- Root Certificate that can issue intermediates
ca_root.key          <-- Private key of ca_root

server.crt           <-- Signed by ca_root.crt for server
server.key           <-- Private key of server.crt

client.crt           <-- Signed by ca_root.crt for client
client.key           <-- Private key of client.crt

certchain.crt        <-- Certificate signed by ca_intermediate.csr
certchain.key        <-- Private key of certchain.crt
certchained.pem      <-- Certificate chain containing ca_intermediate.csr and certchain.crt

index.txt            <-- Used by openssl config
serial               <-- Used by openssl config


////////////////////////////////////////////////////////////////////////////

//create index.txt
touch index.txt

//create serial
echo 1000 > serial

//Generate key with password:1234
openssl genrsa -aes256 -out ca_root.key 2048 -password pass:1234

//remove password from key
openssl rsa -in ca_root.key -out ca_root.key -passin pass:1234

//Create the root CA certificate valid for 824 days to adhere to Apple's requirements
openssl req -config ca_root.cnf -key ca_root.key -new -x509 -days 824 -out ca_root.crt

////////////////////////////////////////////////////////////////////////////
//Create an Intermediate CA certificate

//Generate ca_intermediate.key with password:1234
openssl genrsa -aes256 -out ca_intermediate.key 2048

//remove password from key
openssl rsa -in ca_intermediate.key -out ca_intermediate.key -passin pass:1234

//Create a signing request
openssl req -config ca_intermediate.cnf  -new -sha256  -key ca_intermediate.key  -out ca_intermediate.csr

//Sign the intermediate signing request with the root CA certificate
openssl ca -config ca_root.cnf -extensions v3_intermediate_ca -days 824 -notext -md sha256 -in ca_intermediate.csr -out ca_intermediate.crt


//Create server certificate from ca_root

//Create requestor key with password:1234
openssl genrsa -aes256 -out server.key 2048 -passin pass:1234

//remove password from key
openssl rsa -in server.key -out server.key -passin pass:1234

//Create requestor certificate signing request
openssl req -config ca_root.cnf -key server.key -new -sha256 -out server.csr

//Sign the request as a server certificate
openssl ca -config ca_root.cnf -extensions server_cert -days 824 -subj '/O=Amazon/ST=Washington/CN=localhostserver/C=US' -notext -md sha256 -in server.csr -out server.crt


//Create client certificate from ca_root

//Create requestor key with password:1234
openssl genrsa -aes256 -out client.key 2048 -passin

//remove password from key
openssl rsa -in client.key -out client.key -passin pass:1234

//Create requestor certificate signing request
openssl req -config ca_root.cnf -key client.key -new -sha256 -out client.csr

//Sign the request as a server certificate
openssl ca -config ca_root.cnf -extensions usr_cert -days 824 -subj '/O=Amazon/ST=Washington/CN=localhostclient/C=US' -notext -md sha256 -in client.csr -out client.crt



//Create client certificate for a certificate chain using intermediate certificate

//Create requestor key with password:1234
openssl genrsa -aes256 -out certchain.key 2048

//Create requestor certificate signing request
openssl req -config ca_intermediate.cnf -key certchain.key -new -sha256 -out certchain.csr -passin pass:1234

//Sign the request with ca_intermediate
openssl ca -config ca_intermediate.cnf -extensions usr_cert -days 824 -subj '/O=Amazon/ST=Washington/CN=localhostcertchain/C=US' -notext -md sha256 -in certchain.csr -out certchain.crt

//Create the certificate chain file

cat certchain.crt ca_intermediate.crt > certchained.pem
